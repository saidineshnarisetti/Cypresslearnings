{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-22T08:58:16.145Z",
    "end": "2024-07-22T08:58:17.446Z",
    "duration": 1301,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "aba9efc0-e3b7-41fc-b848-3546c9f9a6dd",
      "title": "",
      "fullFile": "cypress/Integration/examples/postAPIdynamic.js",
      "file": "cypress/Integration/examples/postAPIdynamic.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "89b905f2-7525-47b7-94cd-ab7c1cfd6912",
          "title": "POST API Testing - With Dynamic Values",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST Request",
              "fullTitle": "POST API Testing - With Dynamic Values POST Request",
              "timedOut": null,
              "duration": 1246,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  id: Math.floor(Math.random() * 1000),\n  username: Math.random().toString(36).substring(2, 12),\n  firstName: Math.random().toString(36).substring(2, 7),\n  lastName: Math.random().toString(36).substring(2, 7),\n  email: Math.random().toString(36).substring(2, 10) + \"@gmail.com\",\n  password: Math.random().toString(36).substring(2, 15),\n  phone: Math.floor(Math.random() * 9000000000 + 1000000000).toString(),\n  userStatus: Math.floor(Math.random() * 2)\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: requestBody\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.type).to.eq(\"unknown\");\n  console.log(response.body);\n  // Optionally, you can add more assertions here to verify the response\n});",
              "err": {},
              "uuid": "3fb98079-30ff-4b77-a7be-f9c1cc6c04d1",
              "parentUUID": "89b905f2-7525-47b7-94cd-ab7c1cfd6912",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3fb98079-30ff-4b77-a7be-f9c1cc6c04d1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1246,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}